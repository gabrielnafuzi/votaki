// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

enum PollStatus {
    PUBLISHED
    DRAFT
    ENDED
}

enum PollVisibility {
    PRIVATE
    PUBLIC
}

model PollOption {
    id             String       @id @default(cuid())
    text           String
    votes          Int          @default(0)
    color          String
    image          String
    pollQuestionId String
    PollQuestion   PollQuestion @relation(fields: [pollQuestionId], references: [id])

    @@unique([text, pollQuestionId])
}

model PollCategory {
    id           String         @id @default(cuid())
    name         String         @unique
    color        String
    PollQuestion PollQuestion[]
}

model PollQuestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    endsAt DateTime?

    question   String         @db.VarChar(5000)
    options    PollOption[]
    visibility PollVisibility
    status     PollStatus
    categoryId String
    category   PollCategory   @relation(fields: [categoryId], references: [id])

    allowMultipleVotes Boolean @default(false)
    loginToVote        Boolean @default(false)
    allowComments      Boolean @default(false)
    enableCaptcha      Boolean @default(false)
    hideShare          Boolean @default(false)
    User               User?   @relation(fields: [userId], references: [id])
    userId             String?
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    firstName     String
    lastName      String
    email         String         @unique
    emailVerified DateTime?
    image         String?
    username      String         @unique
    password      String
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    Account       Account[]
    Session       Session[]
    pollQuestions PollQuestion[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
